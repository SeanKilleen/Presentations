{"codeFragments":[{"label":"00_Packages","content":"    <PackageReference Include=\"Microsoft.Azure.KeyVault\" Version=\"3.0.2\" />\r\n    <PackageReference Include=\"Microsoft.Azure.Services.AppAuthentication\" Version=\"1.0.3\" />\r\n    <PackageReference Include=\"Microsoft.Azure.WebJobs.Extensions.Storage\" Version=\"3.0.2\" />\r\n"},{"label":"01_namespace","content":"namespace FeedlyOpmlExport.Functions\r\n{\r\n    \r\n}\r\n"},{"label":"FManager_01_Empty","content":"    public static class FeedlyManager\r\n    {\r\n\r\n    }\r\n"},{"label":"FManager_02_URL","content":"        private const string FEEDLY_BASE_URL = \"https://cloud.feedly.com/v3/\";\r\n"},{"label":"FManager_03_CreateClient","content":"        private static HttpClient CreateFeedlyHttpClient(string accessToken)\r\n        {\r\n            var client = new HttpClient { BaseAddress = new Uri(FEEDLY_BASE_URL) };\r\n            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\r\n            return client;\r\n        }\r\n"},{"label":"FManager_04_RefreshToken","content":"        public static async Task<FeedlyRefreshResponse> RefreshFeedlyAccessToken(string accessToken, ILogger log, string refreshToken)\r\n        {\r\n            var client = CreateFeedlyHttpClient(accessToken);\r\n\r\n            var request = new FeedlyRefreshRequest(refreshToken);\r\n            var response = await client.PostAsJsonAsync(\"auth/token\", request);\r\n\r\n            if (!response.IsSuccessStatusCode)\r\n            {\r\n                var errorContent = await response.Content.ReadAsStringAsync();\r\n                log.LogWarning($\"Response failed. Status {response.StatusCode}, Reason {response.ReasonPhrase}\");\r\n                log.LogWarning($\"Error content: {errorContent}\");\r\n            }\r\n\r\n            response.EnsureSuccessStatusCode();\r\n\r\n            return JsonConvert.DeserializeObject<FeedlyRefreshResponse>(await response.Content.ReadAsStringAsync());\r\n\r\n        }"},{"label":"FManager_05_GetOpml","content":"        public static async Task<string> GetOpmlContents(string accessToken)\r\n        {\r\n            var client = CreateFeedlyHttpClient(accessToken);\r\n\r\n            var response = await client.GetAsync(\"opml\");\r\n            response.EnsureSuccessStatusCode();\r\n\r\n            return await response.Content.ReadAsStringAsync();\r\n        }"},{"label":"FManager_06_Usings","content":"using System;\r\nusing System.Net.Http;\r\nusing System.Net.Http.Headers;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Extensions.Logging;\r\nusing Newtonsoft.Json;\r\n"},{"label":"POCO_RefreshResponse","content":"namespace FeedlyOpmlExport.Functions\r\n{\r\n    public class FeedlyRefreshResponse\r\n    {\r\n        public string access_token { get; set; }\r\n        public string plan { get; set; }\r\n\r\n    }\r\n}"},{"label":"POCO_RefreshRequest","content":"namespace FeedlyOpmlExport.Functions\r\n{\r\n    public class FeedlyRefreshRequest\r\n    {\r\n        private const string FEEDLY_CLIENT_ID = \"feedlydev\"; // hard-coded for users with Pro accounts\r\n\r\n        public string refresh_token { get; }\r\n        public string client_id =>  FEEDLY_CLIENT_ID;\r\n        public string client_secret => FEEDLY_CLIENT_ID;\r\n        public string grant_type => \"refresh_token\";\r\n\r\n        public FeedlyRefreshRequest(string refreshToken)\r\n        {\r\n            refresh_token = refreshToken;\r\n        }        \r\n    }\r\n}"},{"label":"OpmlFilterer","content":"using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Xml.Linq;\r\n\r\nnamespace FeedlyOpmlExport.Functions\r\n{\r\n    public static class OpmlFilterer\r\n    {\r\n        public static string FilterToCategories(string opmlXml, List<string> categories)\r\n        {\r\n            var opmlDoc = XElement.Parse(opmlXml);\r\n\r\n            opmlDoc.Descendants(\"body\").DescendantNodes()\r\n                .Where(x =>\r\n                {\r\n                    var containerized = (XElement)x;\r\n\r\n                    return x.Parent.Name == \"body\"\r\n                           && !categories.Contains(containerized.Attribute(XName.Get(\"title\"))?.Value.ToLowerInvariant());\r\n                })\r\n                .Remove();\r\n\r\n            return opmlDoc.ToString();\r\n        }\r\n    }\r\n}"},{"label":"OpmlLabeler","content":"using System.Linq;\r\nusing System.Xml.Linq;\r\n\r\nnamespace FeedlyOpmlExport.Functions\r\n{\r\n    public static class OpmlLabeler\r\n    {\r\n        public static string LabelOpmlFile(string opmlXml)\r\n        {\r\n            var opmlDoc = XElement.Parse(opmlXml);\r\n\r\n            var firstLevelChildren = opmlDoc.DescendantNodes().Where(x => x.Parent.Name == \"body\");\r\n\r\n            foreach (var child in firstLevelChildren)\r\n            {\r\n                var containerized = (XElement)child;\r\n\r\n                var titleAttribute = containerized.Attribute(XName.Get(\"title\"));\r\n                titleAttribute.SetValue(titleAttribute.Value + \" - via Sean Killeen\");\r\n\r\n                var textAttribute = containerized.Attribute(XName.Get(\"text\"));\r\n                textAttribute.SetValue(textAttribute.Value + \" - via Sean Killeen\");\r\n            }\r\n\r\n            return opmlDoc.ToString();\r\n        }\r\n    }\r\n}"},{"label":"KManager_01_Empty","content":"    public static class KeyVaultManager\r\n    {\r\n        \r\n    }\r\n"},{"label":"KManager_02_Consts","content":"        private const string KEY_VAULT_BASE_URL = \"https://feedly-export-demo.vault.azure.net\";\r\n        private const string ACCESS_TOKEN_KEY_NAME = \"feedly-access-token\";\r\n"},{"label":"KManager_03_CreateClient","content":"        private static KeyVaultClient CreateKeyVaultClient()\r\n        {\r\n            var azureServiceTokenProvider = new AzureServiceTokenProvider();\r\n            var authenticationCallback = new KeyVaultClient.AuthenticationCallback(azureServiceTokenProvider.KeyVaultTokenCallback);\r\n\r\n            return new KeyVaultClient(authenticationCallback);\r\n        }\r\n"},{"label":"KManager_04_ClientField","content":"        private static KeyVaultClient theClient = CreateKeyVaultClient();\r\n"},{"label":"KManager_05_GetToken","content":"        public static async Task<string> GetFeedlyAccessToken()\r\n        {\r\n            var accessToken = await theClient.GetSecretAsync(KEY_VAULT_BASE_URL, ACCESS_TOKEN_KEY_NAME, CancellationToken.None);\r\n            return accessToken.Value;\r\n        }\r\n"},{"label":"KManager_06_UpdateToken","content":"        public static async Task UpdateFeedlyAccessToken(string feedlyResponseAccessToken)\r\n        {\r\n            await theClient.SetSecretAsync(KEY_VAULT_BASE_URL, ACCESS_TOKEN_KEY_NAME, feedlyResponseAccessToken);\r\n        }\r\n"},{"label":"KManager_07_Usings","content":"using System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Azure.KeyVault;\r\nusing Microsoft.Azure.Services.AppAuthentication;"},{"label":"Func_Refresh_01_Empty","content":"    public static class RefreshFeedlyAuthToken\r\n    {\r\n        \r\n    }\r\n"},{"label":"Func_Refresh_02_Consts","content":"        private static readonly string userId = Environment.GetEnvironmentVariable(\"feedly-user-id\");\r\n        private static readonly string refreshToken = Environment.GetEnvironmentVariable(\"feedly-refresh-token\");\r\n"},{"label":"Func_Refresh_03a_Empty","content":"        [FunctionName(\"RefreshFeedlyAuthToken\")]\r\n        public static async Task Run([TimerTrigger(\"0 0 */6 * * *\")]TimerInfo myTimer, ILogger log)\r\n        {\r\n            \r\n        }\r\n"},{"label":"Func_Refresh_03_InitialLogs","content":"            log.LogInformation($\"RefreshFeedlyAuthToken function executed at: {DateTime.Now}\");\r\n            log.LogInformation($\"UserId: {userId}\");\r\n"},{"label":"Func_Refresh_04_GetAccessToken","content":"            log.LogInformation(\"Getting current access token contents from key vault\");\r\n            var accessToken = await KeyVaultManager.GetFeedlyAccessToken();\r\n"},{"label":"Func_Refresh_05_RefreshToken","content":"            log.LogInformation(\"Getting refreshed access token from Feedly API\");\r\n            var feedlyResponse = await FeedlyManager.RefreshFeedlyAccessToken(accessToken, log, refreshToken);\r\n"},{"label":"Func_Refresh_06_UpdateToken","content":"            log.LogInformation(\"Setting the secret in the key vault\");\r\n            await KeyVaultManager.UpdateFeedlyAccessToken(feedlyResponse.access_token);\r\n"},{"label":"Func_Refresh_07_EndLog","content":"            log.LogInformation(\"Successfully updated token in the key vault\");\r\n"},{"label":"Func_Refresh_08_Usings","content":"using System;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Azure.WebJobs;\r\nusing Microsoft.Azure.WebJobs.Host;\r\nusing Microsoft.Extensions.Logging;"},{"label":"Func_Extract_01_Empty","content":"    public static class ExtractFeedlyOPML\r\n    {\r\n\r\n    }\r\n"},{"label":"Func_Extract_02_Sig","content":"        [FunctionName(\"ExtractFeedlyOPML\")]\r\n        public static async Task Run(\r\n            [TimerTrigger(\"0 0 5 * * *\")]TimerInfo myTimer\r\n            , ILogger log\r\n            , [Blob(\"opml-file/SeanKilleenBlogs.opml\", FileAccess.Write)] Stream blobOutput)\r\n        {\r\n            \r\n        }\r\n"},{"label":"Func_Extract_03_GetContents","content":"            log.LogInformation($\"C# Timer trigger function executed at: {DateTime.Now}\");\r\n\r\n            var accessToken = await KeyVaultManager.GetFeedlyAccessToken();\r\n            var opmlXml = await FeedlyManager.GetOpmlContents(accessToken);\r\n"},{"label":"Func_Extract_04_Filter","content":"            var categories = new List<string> { \"development\", \"tech\", \"development - discover.net\" };\r\n            var filteredDoc = OpmlFilterer.FilterToCategories(opmlXml, categories);\r\n\r\n            log.LogInformation(\"After filtering: \");\r\n            log.LogInformation(filteredDoc);\r\n"},{"label":"Func_Extract_05_Label","content":"            var filterAndLabeledDoc = OpmlLabeler.LabelOpmlFile(filteredDoc);\r\n            log.LogInformation(\"After labeling: \");\r\n            log.LogInformation(filterAndLabeledDoc);\r\n"},{"label":"Func_Extract_06_SaveBlob","content":"            log.LogInformation(\"Saving to the blob\");\r\n            var thing = Encoding.Default.GetBytes(filterAndLabeledDoc);\r\n            await blobOutput.WriteAsync(thing, 0, thing.Length);\r\n\r\n            log.LogInformation(\"Done!\");\r\n"},{"label":"Func_Extract_07_Usings","content":"using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Azure.WebJobs;\r\nusing Microsoft.Extensions.Logging;"}]}